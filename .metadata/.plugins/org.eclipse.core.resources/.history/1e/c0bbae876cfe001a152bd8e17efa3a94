変更
「->」～手順の流れ
「＝＞」結果
「～>」思考の流れ

(1)ideaRefパッケージを作成

(2)ideaパッケージの中にあるquiz.javaを右クリックで選択
   ->コピーをクリック->selectQuizを右クリック->貼り付け
     =>同じファイル名(=クラス名)だがパッケージ名がちがうため
     同名のファイルがつくれる(名前の衝突を避ける=>名前空間)
     
(a)同じ問題だと計算練習にならないので、プログラムの実行時に
毎回変わるようにしたい～>配列の要素内で文字列結合されている変数を
乱数でランダムに表示させればいいのでは

   (3)java.util.Randomをインポートし、型がRandomのインスタンスを
   生成し、変数に格納
   
   (4)格納した変数でnextInt()メソッドにアクセス,引数は実行結果のテストを
      しやすいように10でおk

(b)問題文の変数部分を乱数に置き換えたことで合否を判定する際の材料
であるtruth変数が一致しなくなる～＞一度宣言して代入した変数はまた違う値を代入
されない限り同じ変数名ならどこで利用しても同じ値～>計算問題なので生成した
乱数を格納した変数で式を作り、その値をtruth変数に入れれば同じ動きをつくれるのではないか
割り算の問題に関しては

(c)配列のインデックス番号(添え字)を指定してキーボードから
得た入力値を入れていくのは変数に入れるのとあまり変わらないし
冗長的なコードの原因になる～>せっかく配列を使っているのでfor文を用いて
各インデックス番号を指定した配列に入力値を格納できないのであろうか
	
	(5)java.util.Scannerをインポートし、型がScannerのインスタンスを
	生成し、変数に格納
	
	(6)for文でインデックス番号をiとしてi を初期条件0とする
	繰り返す条件式はiの値がanswer配列の要素数より小さいとき、
	増減式はインクリメント
	繰り返すたびにanswerのi番目に入力値を代入
	
	
(d)三角形の面積の答えをtruth2に格納したが乱数によっては小数が伴う
～>しかし生成された乱数はint型でint型だけの割り算は自動的に
	小数第一位は切り捨てられてint型に変換される
～＞truth2だけdouble型でキャストして double truth2の変数に
	書き換えて代入する
～＞しかしScannerインスタンスでアクセスしたnextIntメソッドは
	キーボードの入力値をInt型に変換してからanswer配列に格納するので
	入力値をdouble型に変えるnextDoubleメソッドに置き換える必要がある
～>nextDoubleの戻り値はdouble型なので
   answer配列のデータ型もdouble型にする必要がある
